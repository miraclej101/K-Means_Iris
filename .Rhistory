X=2+4
x
x=2+4
x
(x=2+4)
x=c(1,4,9)
y=c(x,2,3)
x+y
y+y
y= matrix(2,3,5,7,11,13)
x = y
y= matrix(c(2,3,5,7,11,13),ncol = 2, byrow = T)
y
y= matrix(c(2,3,5,7,11,13),ncol = 2, byrow = F)
y
y= matrix(c(2,3,5,7,11,13),ncol = 2)
y
vect = c(1.1:10.1)
mat = matrix(vect,ncol=3,nrow=3)
mat
vect(1)
vect[1]
mat[2,1]
vect[,1]
mat[2,1]
mat[,1]
mat[3,]
vect[c(2,4,8)]
mat[2:3,1:2]
mat[2:3,1:2]
vect[vect>8]
vect[(vect>8) | (vect<2)]
vect[(vect>8) & (vect<10)]
rnd = list(serie=c(1:100),taille=100,type="arithm")
rnd
names(rnd)
rnd[serie]
summary(rnd)
rnd$serie
rnd$taille
rnd$type
rnd[[1]]
rnd[[2]]
rnd[[3]]
attach(rnd)
x = attach(rnd)
x
detach(rnd)
attach(rnd)
detach(rnd)
rm(x)
x
carre = function(n){}
carre = function(n){carre=n*n
list(carre)}
x = carre(2)
x
x
x
fix(carre)
carre(4)
(carre(4))
print(carre(2))
fix(carre)
print(carre(5))
fix(carre)
carre(5)
print(carre(5))
x = rnorm(50)
hist(x,breaks = 12)
hist(x,breaks = 20)
hist(x,breaks = 15)
apply(x,1,mean)
install.packages('FactoMineR')
install.packages('FactoMineR')
install.packages("FactoMineR")
install.packages("installr")
library(installr)
updateR()
install.packages('FactoMineR')
install.packages('FactoMineR')
library(FactoMineR)
decathlon <- read.csv("C:\Users\malas\Documents\MIAGE\AFD\TP_R\decathlon.csv",header=TRUE)
decathlon <- read.csv("C:/Users/malas/Documents/MIAGE/AFD/TP_R/decathlon.csv",header=TRUE)
summary(decathlon)
View(decathlon)
View(decathlon)
decathlon <- read.csv("C:\Users\malas\Documents\MIAGE\AFD\TP_R\decathlon.csv",header=TRUE)
summary(decathlon)
res.pca <- PCA(decathlon,quanti.sup = 11:12,quali.sup = 13)
decathlon
decathlon(:,13)
decathlon(:13)
decathlon(,13)
decathlon(13)
decathlon[13]
decathlon[,13]
decathlon[,14]
res.pca <- PCA(decathlon,quanti.sup = 12:13,quali.sup = 14)
decathlon[12:13]
decathlon <- transform(decathlon,Rank=as.numeric(Rank),Points=as.numeric(Points))
decathlon
summary(decathlon)
res.pca <- PCA(decathlon,quanti.sup = 12:13,quali.sup = 14)
str(decathlon)
res.pca <- PCA(decathlon[,1:11],quanti.sup = 12:13,quali.sup = 14)
res.pca <- PCA(decathlon[,1:10],quanti.sup = 12:13,quali.sup = 14)
res.pca <- PCA(decathlon[,2:11],quanti.sup = 12:13,quali.sup = 14)
res.pca <- PCA(decathlon[,2:10],quanti.sup = 12:13,quali.sup = 14)
res.pca <- PCA(decathlon[1:10],scale.unit = True,ncp=5,graph = T)
res.pca <- PCA(decathlon[,1:10],scale.unit = True,ncp=5,graph = T)
res.pca <- PCA(decathlon[,1:11],scale.unit = True,ncp=5,graph = T)
res.pca <- PCA(decathlon[,2:11],scale.unit = True,ncp=5,graph = T)
res.pca <- PCA(decathlon[,2:11],scale.unit = TRUE,ncp=5,graph = T)
res.dec
res.dec
res.pca.dec
res.pca.dec
res <- res.pca
res.dec
del res.pca
clear
res <-PCA(decathlon[,2:11],scale.unit = TRUE,ncp=5,graph =T)
res.dec
View(res.pca)
View(res.pca)
View(res)
View(res.pca)
View(res.pca)
View(res)
res$eig
summary(res)
res <-PCA(decathlon[,2:11],scale.unit = TRUE,ncp=5,graph =T,quanti.sup = 12:13,quali.sup = 14)
res <-PCA(decathlon[,2:14],scale.unit = TRUE,ncp=5,graph =T,quanti.sup = 11:12,quali.sup = 13)
summary(res)
plot(res,choix="ind",habillage = 13)
res <-PCA(decathlon,scale.unit = TRUE,ncp=5,graph =T,quanti.sup = 11:12,quali.sup = 1,13)
res <-PCA(decathlon,scale.unit = TRUE,ncp=5,graph =T,quanti.sup = 12:13,quali.sup = 1,14)
res <-PCA(decathlon,scale.unit = TRUE,ncp=5,graph =T,quanti.sup = 12:13,quali.sup = c(1,14))
plot(res,choix="ind",habillage = 14)
plot(res,choix="var",habillage = 14)
plot(res,choix="ind",habillage = 14)
plot(res,choix="ind",habillage = 14,label=decathlon[1])
plot(res,choix="ind",habillage = 14,label="quali.sup[1]")
plot(res,choix="ind",habillage = 14,label="quali.sup")
plot(res,choix="ind",habillage = 14,label="X")
plot(res,choix="ind")
plot(res,choix="ind",habillage = 14)
plot(res,choix="ind")
clear()
res
plot(res,choix="decathlon[1]")
plot(res,choix="ind)
plot(res,choix="ind")
plot(res,choix="ind")
plot(res,choix="ind",label="quali")
plot(res,choix="ind",label="quali",invisible = "quali")
plot(res,choix="ind",label="quali",habillage = 14)
plot(res,choix="var",habillage = 14)
plot(res,choix="var")
plot(res,choix="ind",label="quali",habillage = 14)
res$eig
res$var
res$cor
res$coor
str(res)
res$call
#Repr?sentations des ligens et des colonnes s?par?ment
#res.ca.rows = CA(women_work[,2:4],, invisible="col")
#res.ca.col = CA(women_work[,2:4],, invisible="row")
#Repr?sentations des ligens et des colonnes s?par?ment
#res.ca.rows = CA(women_work[,2:4],, invisible="col")
#res.ca.col = CA(women_work[,2:4],, invisible="row")
#Repr?sentations des ligens et des colonnes s?par?ment
#res.ca.rows = CA(women_work[,2:4],, invisible="col")
#res.ca.col = CA(women_work[,2:4],, invisible="row")
#Repr?sentations des ligens et des colonnes s?par?ment
#res.ca.rows = CA(women_work[,2:4],, invisible="col")
#res.ca.col = CA(women_work[,2:4],, invisible="row")
#repr?senter des lignes et des colonnes
res.ca = CA(women_work[,2:4])
#repr?senter des lignes et des colonnes
res.ca = CA(women_work[,2:4])
women_work=read.table(""C:/Users/malas/Documents/MIAGE/AFD/TP_R/Women_Work.csv"", sep=";",header=TRUE)
#repr?senter des lignes et des colonnes
res.ca = CA(women_work[,2:4])
women_work=read.table("C:/Users/malas/Documents/MIAGE/AFD/TP_R/Women_Work.csv", sep=";",header=TRUE)
res.ca.col = CA(women_work[,2:4],, invisible="row")
Repr?sentations des ligens et des colonnes s?par?ment
#res.ca.rows = CA(women_work[,2:4],, invisible="col")
#
#Repr?sentations des ligens et des colonnes s?par?ment
#res.ca.rows = CA(women_work[,2:4],, invisible="col")
#res.ca.col = CA(women_work[,2:4],, invisible="row")
summary(res.ca)
women_work=read.table("./Women_Work.csv", sep=";",header=TRUE)
women_work=read.table("/Women_Work.csv", sep=";",header=TRUE)
women_work=read.table("Women_Work.csv", sep=";",header=TRUE)
#repr?senter des lignes et des colonnes
res.ca = CA(women_work[,2:4])
summary(res.ca)
summary(res.ca)
iris<-read.table("C:/data/eleven/DataR/iris.csv",sep=";",header=TRUE)
iris<-read.table("DataR/iris.csv",sep=";",header=TRUE)
idx<-sample(1:dim(iris)[1],40)  #Echantillon de 40 individus
irisSample<-iris[idx,]
iris<-read.table("iris.csv",sep=";",header=TRUE)
iris<-read.table("iris.csv",sep=";",header=TRUE)
idx<-sample(1:dim(iris)[1],40)  #Echantillon de 40 individus
irisSample<-iris[idx,]
irisSample$ESPECE<-NULL
hc<-hclust(dist(irisSample),method="ave")
plot(hc, hang=-1, labels=iris$ESPECE[idx])
#Couper l'arbre en 3 groupes
groups<-cutree(hc,k=3)
print(groups)
iris<-read.table("iris.csv",sep=";",header=TRUE)
iris<-read.table("iris.csv",sep=";",header=TRUE)
iris<-read.table("iris.csv",sep=";",header=TRUE)
iris<-read.table("iris.csv",sep=";",header=TRUE)
idx<-sample(1:dim(iris)[1],40)  #Echantillon de 40 individus
idx<-sample(1:dim(iris)[1],40)  #Echantillon de 40 individus
iris<-read.table("iris.csv",sep=";",header=TRUE)
idx<-sample(1:dim(iris)[1],40)  #Echantillon de 40 individus
irisSample<-iris[idx,]
irisSample$ESPECE<-NULL
hc<-hclust(dist(irisSample),method="ave")
plot(hc, hang=-1, labels=iris$ESPECE[idx])
#Couper l'arbre en 3 groupes
groups<-cutree(hc,k=3)
print(groups)
hc<-hclust(dist(irisSample),method = "Ward.D")
hc<-hclust(dist(irisSample),method = "ward.D")
plot(hc, hang = -1, labels = iris$ESPECE[idx])
groups <- cutree(hc,k=3)
print(groups)
shiny::runApp('MIAGE/AFD/TP_R/test_Shiny')
library(FactoMineR)
data("decathlon")
summary(decathlon)
head(decathlon)
str(decathlon)
data()
data()
data("iris")
iris.head()
head(iris)
summary(iris)
library("factoextra")
library("factoextra")
library("factoextra")
library(factoextra)
install.packages("factoextra")
library(factoextra)
library("factoextra")
install.packages("factoextra")
library("factoextra")
data("iris")
library(FactoMineR)
res.pca <- PCA(iris,scale.unit = TRUE, quali.sup = 5, ncp = 4)
fviz_screeplot(res.pca,addlabels=TRUE,ylim=c(0,100))
res.hc<- hclust(dist)
res.hc<- hclust(dist(res.pca),method = "ward.D")
summary(res.pca)
res.hc<- hclust(dist(res.pca),method = "ward.D")
res.hc<- hclust(dist(iris),method = "ward.D")
fviz_dend(res.hc)
iris_s <-scale(iris)
iris_s <-scale(iris[,-5])
res.hc<- hclust(dist(iris_s),method = "ward.D")
fviz_dend(res.hc,cex = 0.5)
res.hc<- hclust(dist(res.pca),method = "ward.D")
iris_sample<-iris_sample[sample(1:nrow(iris_s),40),]
iris_sample<-iris_s[sample(1:nrow(iris_s),40),]
res.hc<- hclust(dist(iris_sample),method = "ward.D")
fviz_dend(res.hc,cex = 0.5,k=3,color_labels_by_k = TRUE)
fviz_dend(res.hc,cex = 0.5,k=4,color_labels_by_k = TRUE)
hc.cut<-hcut(iris_sample,k=4,hc_method = "ward.D")
fviz_cluster(hc.cut,elipse.type="norm")
fviz_silhouette(hc.cut)
fviz_dend(res.hc,cex = 0.5,k=4,color_labels_by_k = TRUE)
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
data(iris)
str(iris)
head(iris)
head(iris)
data()
data("iris")
data("iris")
str(iris)
df<-scale(iris[,-5])
df
str(df)
q()
data()
data("iris")
str(iris)
head(iris)
library(FactoMineR)
library(factoextra)
df <- scale(iris[,-5])
res.km <- kmeans(df,centers=3, nstart=25)
fviz_cluster(res.km,data=iris,geom = c("point","text"),ellipse.type = "convex",labelsize = 10,shape = "Species",legend="right",ggtheme = theme_gray())
summary(res.km)
res.km$cluster
fviz_cluster(res.km,data=iris,geom = c("point","text"),ellipse.type = "convex",labelsize = 10,shape = "Species",legend="right",ggtheme = theme_gray())
fviz_cluster(res.km,data=iris,geom = c("point","text"),ellipse.type = "convex",labelsize = 10,legend="right",ggtheme = theme_gray())
fviz_cluster(res.km,data=iris,geom = c("point","text"),ellipse.type = "convex",labelsize = 10,ggtheme = theme_gray())
fviz_cluster(res.km,data=scale(iris),geom = c("point","text"),ellipse.type = "convex",labelsize = 10,shape = "Species",legend="right",ggtheme = theme_gray())
fviz_cluster(res.km,data=df,geom = c("point","text"),ellipse.type = "convex",labelsize = 10,shape = "Species",legend="right",ggtheme = theme_gray())
fviz_cluster(res.km,data=df,geom = c("point","text"),ellipse.type = "convex",labelsize = 10,shape = iris$Species,legend="right",ggtheme = theme_gray())
fviz_cluster(res.km,data=df,geom = c("point","text"),ellipse.type = "convex",labelsize = 10,legend="right",ggtheme = theme_gray())
fviz_cluster(res.km,data=df,geom = c("point","text"),ellipse.type = "convex",rebel=TRUE,labelsize = 5,legend="right",ggtheme = theme_gray())
fviz_cluster(res.km,data=df,geom = c("point","text"),ellipse.type = "convex",rebel=TRUE,labelsize = 8,legend="right",ggtheme = theme_gray())
hear(df)
head(df)
df[1]
df[5,1]
df[:5,1]
df[:,1]
df[:4,1]
df[,1]
df[1:5,1]
df[,0]
summary(df)
res.pca<- PCA(df,graph = FALSE)
res.ind$coord <- res.pca$ind$coord
ggscatter()
install.packages("ggpubr")
install.packages("ggpubr")
ggscater()
ggscatter(res.pca$ind$coord,x="Dim.1",y="Dim.2",)
ggscatter(res.pca$ind$coord,x="Dim.1",y="Dim.2",color="cluster")
install.packages("plyr")
install.packages("ggpubr")
ggscatter()
install.packages("ggpubr")
ggscatter(res.pca$ind$coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type="convex",shape=iris$Species,legend="right",xlab="Dim 1",ylab="Dim 2")
uninstall.package(ggpubr)
library(ggpubr)
ggscatter(res.pca$ind$coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type="convex",shape=iris$Species,legend="right",xlab="Dim 1",ylab="Dim 2")
ggscatter(df,x=res.pca$ind$coord[1],y=res.pca$ind$coord[2],color="cluster",ellipse.type = "convex",shape = iris$Species,legend)
ggscatter(df,x=res.pca$ind$coord[1],y=res.pca$ind$coord[2],color="cluster",ellipse.type = "convex",shape = iris$Species,legend="right",xlab = "Dim 1",ylab = "Dim2")
type(df)
df.type
str(df)
str(res.pca)
summary(res.pca)
ind.coord <- as.data.frame(res.pca$ind$coord)
ind.coord$Species <- iris$Species
str(ind.coord)
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color=res.km$cluster,ellipse.type = "convex",shape ="Species",legend="right",xlab = "Dim 1",ylab = "Dim2")
View(res.km)
summary(res.km)
ind.coord$cluster <-res.km$cluster
summary(ind.coord)
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type = "convex",shape ="Species",legend="right",xlab = "Dim 1",ylab = "Dim2")
res.km$eig
res.km$eig
sumpmary(res.km)
summary(res.km)
res.pca
res.pca$eig
res.pca$eig[2]
res.pca$eig[1,2]
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse = TRUE,ellipse.type = "convex",shape ="Species",legend="right",xlab = paste0("Dim 1 (", res.pca$eig[1,2], "% )" ),ylab = paste0("Dim 2 (", res.pca$eig[2,2], "% )" ))
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse = TRUE,ellipse.type = "convex",shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste0("Dim 1 (", res.pca$eig[1,2], "% )"),ylab = paste0("Dim 2 (", res.pca$eig[2,2], "% )"))
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse = TRUE,ellipse.type = "convex",shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", res.pca$eig[1,2], "% )"),ylab = paste("Dim 2 (", res.pca$eig[2,2], "% )"))
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse = TRUE,ellipse.type = "convex",shape ="Species",legend="right",ggtheme = theme_grey(),xlab = "Dim 1",ylab = "Dim 2")
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse = TRUE,ellipse.type = "convex",shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", res.pca$eig[1,2], "% )"),ylab = paste("Dim 2 (", res.pca$eig[2,2], "% )"))
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type = "convex",shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", res.pca$eig[1,2], "% )"),ylab = paste("Dim 2 (", res.pca$eig[2,2], "% )"))
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Species", size = 1.5,  legend = "right", ggtheme = theme_gray(),
xlab = paste0("Dim 1 (", round(res.pca$eig[1,2],1), "% )" ),
ylab = paste0("Dim 2 (", round(res.pca$eig[2,2],1), "% )" )
)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse.type = "convex",
shape = "Species", size = 1.5,  legend = "right", ggtheme = theme_gray(),
xlab = paste0("Dim 1 (", round(res.pca$eig[1,2],1), "% )" ),
ylab = paste0("Dim 2 (", round(res.pca$eig[2,2],1), "% )" )
)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse.type = "convex",
shape = "Species", size = 1.5,  legend = "right", ggtheme = theme_gray(),
xlab = paste0("Dim 1 (", round(res.pca$eig[1,2],1), "% )" ),
ylab = paste0("Dim 2 (", round(res.pca$eig[2,2],1), "% )" )
)
ggscatter(ind.coord, x = "Dim.1", y = "Dim.2",color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",shape = "Species", size = 1.5,legend = "right",ggtheme = theme_gray(),xlab = paste0("Dim 1 (", round(res.pca$eig[1,2],1), "% )" ),ylab = paste0("Dim 2 (", round(res.pca$eig[2,2],1), "% )" )
)
ggscatter(ind.coord, x = "Dim.1", y = "Dim.2",color = "cluster", palette = "npg", ellipse.type = "convex",shape = "Species", size = 1.5,legend = "right",ggtheme = theme_gray(),xlab = paste0("Dim 1 (", round(res.pca$eig[1,2],1), "% )" ),ylab = paste0("Dim 2 (", round(res.pca$eig[2,2],1), "% )" )
)
ggscatter(ind.coord, x = "Dim.1", y = "Dim.2",color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",shape = "Species", size = 1.5,legend = "right",ggtheme = theme_gray(),xlab = paste0("Dim 1 (", round(res.pca$eig[1,2],1), "% )" ),ylab = paste0("Dim 2 (", round(res.pca$eig[2,2],1), "% )" )
)
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type = "convex",shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", res.pca$eig[1,2], "% )"),ylab = paste("Dim 2 (", res.pca$eig[2,2], "% )"))
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type = "convex",shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", round(res.pca$eig[1,2],1), "% )"),ylab = paste("Dim 2 (", round(res.pca$eig[2,2],1), "% )"))
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type = "convex",ellipse = TRUE,shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", round(res.pca$eig[1,2],1), "% )"),ylab = paste("Dim 2 (", round(res.pca$eig[2,2],1), "% )"))
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type = "convex",shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", round(res.pca$eig[1,2],1), "% )"),ylab = paste("Dim 2 (", round(res.pca$eig[2,2],1), "% )"))
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",ellipse.type = "convex",ellipse = TRUE,shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", round(res.pca$eig[1,2],1), "% )"),ylab = paste("Dim 2 (", round(res.pca$eig[2,2],1), "% )"))+stat_mean(aes(color=cluster),size=4)
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",palette = "npg",ellipse.type = "convex",ellipse = TRUE,shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", round(res.pca$eig[1,2],1), "% )"),ylab = paste("Dim 2 (", round(res.pca$eig[2,2],1), "% )"))+stat_mean(aes(color=cluster),size=4)
ind.coord$cluster <- factor(res.km$cluster)
ggscatter(ind.coord,x="Dim.1",y="Dim.2",color="cluster",palette = "npg",ellipse.type = "convex",ellipse = TRUE,shape ="Species",legend="right",ggtheme = theme_grey(),xlab = paste("Dim 1 (", round(res.pca$eig[1,2],1), "% )"),ylab = paste("Dim 2 (", round(res.pca$eig[2,2],1), "% )"))+stat_mean(aes(color=cluster),size=4)
shiny::runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
data(iris)
str(iris)
head(iris)
View(iris)
shiny::runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
--version
r --version
R --version
runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
version
shiny::runApp('MIAGE/AFD/TP_R/Kmeans_Shiny')
